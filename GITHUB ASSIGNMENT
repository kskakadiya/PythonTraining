GitHub Assignment (July 21)

    1. What are the advantages of using Git?
    • It makes it easy to contribute to your open source project, Documentation, We can showcase our work, Keeps track of changes in the code across versions, Integration options.

    2. What language is used in Git?
    • C , TCL, Pearl, Python

    3. What is the meaning of “Index” or “Staging Area” in Git?
    • The index is a staging area where the new commit is prepared. Essentially, the contents of the index are what will go into the new commit. 

    4. What is the process for creating a repository in Git?
    • Create a directory to contain the project.
    • Go into the new directory.
    • Type git in it.
    • Write some code.
    • Type git add to add the files.
    • Type git commit.

    5. What is ‘head’ in Git and how many heads can be created in a repository?
    • Head is a pointer to the branch or commit that you last checked out, and which will be the parent of a new commit if you make it. For example, if you're on the master branch, then HEAD will be pointing to master, and when you commit, that new commit will be a descendant of the revision that your master pointed to, and master will be updated to point to the new commit.

    6. Why do we need branching in Git?
    • In Git, branches are a part of your everyday development process. Git branches are effectively a pointer to a snapshot of your changes. When you want to add a new feature or fix a bug, no matter how big or how small, you spawn a new branch to encapsulate your changes.

    7. Write a way to create a new branch in Git?
    • To create a new branch just type command git checkout –b followed by the desired branch name.

    8. How do you define a ‘conflict’ in Git?
    • A conflict arises when two separate branches have made edits to the same line in a file, or when a file has been deleted in one branch but edited in the other.

    9. How to resolve a conflict in Git?
    • Git offers powerful tools to help navigate and resolve conflicts. Git can handle most merges on its own with automatic merging features.

    10. What is the function of ‘git config’?
    • The git config command is a convenience function that is used to set Git configuration values on a global or local project level. These configuration levels correspond to gitconfig text files. Executing git config will modify a configuration text file.

    11. What is Git fork?
    • A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.

    12. Difference between fork, branch and clone?
    • A fork is a copy of a repository that allows you to freely experiment with changes without affecting the original project. A forked repository differs from a clone in that a connection exists between your fork and the original repository itself.
    • Unlike forking, you won’t be able to pull down changes from the original repository you cloned from, and if the project is owned by someone else you won’t be able to contribute back to it unless you are specifically invited as a collaborator.
    • A branch is something that is within a repository. Conceptually, it represents a thread of development.

    13. What's the difference between a "pull request" and a "branch"?
    • A branch is just a separate version of the code. A pull request is when someone take the repo, makes their own branch, does some changes, then tries to merge that branch in.

    14. What is the difference between "git pull" and "git fetch"?
    • Git fetch is the command that tells your local git to retrieve the latest meta-data info from the original (yet doesn't do any file transferring. It's more like just checking to see if there are any changes available). git pull on the other hand does that AND brings (copy) those changes from the remote repository.

    15. How to revert previous commit in Git?
    • Git revert <unwanted commit hash> ; then you can push this new commit, which undid your previous commit. To fix the detached head do git checkout <current branch>

    16. Explain the advantages of Forking Workflow
    • The main advantage of Forking Workflow is that contributions can be integrated without everyone having to be pushed into a single central repository. Developers access their own server-side repositories, and only the project manager can access the official repository. In addition, we can track your work, which is to create versions so that we can reference these versions locally as needed.
    17. Difference between HEAD, working tree and index, in Git?
    • Working trees: They are nothing but the files that you are currently working on.
    • HEAD: HEAD is a pointer to the branch or commit that you last checked out, and which will be the parent of a new commit if you make it.
    • Index: The git "index" is where you place files you want commit to the git repository. The index is a staging area where the new commit is prepared. 

    18. How to identify if a certain branch has been merged into master?
    • Git branch --merged master. The -a flag will show both local and remote branches, and the -r flag shows only the remote branches.

    19. What is the use of a Git clone?
    • Git clone is primarily used to point to an existing repo and make a clone or copy of that repo at in a new directory, at another location.

    20. What is Git stash?
    • Git stash temporarily shelves (or stashes) changes you've made to your working copy so you can work on something else, and then come back and re-apply them later on.

    21. When should I use "git stash"?
    • Stashing is handy if you need to quickly switch context and work on something else, but you're mid-way through a code change and aren't quite ready to commit.

    22. What is Git stash drop?
    • In case we do not need a specific stash, we use git stash drop command to remove it from the list of stashes. By default, this command removes to latest added stash. To remove a specific stash we specify as argument in the git stash drop <stashname> command.

    23. What is Git stash save? 
    • The git stash command takes your uncommitted changes (both staged and unstaged), saves them away for later use, and then reverts them from your working copy.

    24. What is README.MD? What is its purpose? What does MD stands for?
    • A README.MD file contains information about other files in a directory or archive of computer software.
    • md extension stands for Markdown, which Github uses, among others, to format those files.

    25. How to create repository from command prompt?
    • Go into the new directory.
    • Type git init.
    • Write some code.
    • Type git add to add the files.
    • Type git commit.
    • The first file to create is probably a ReadMe file, either as plain text or with Markdown, describing the project.

    26. What is the function of ‘git checkout’ in Git?
    • The git checkout command lets you navigate between the branches created by git branch . Checking out a branch updates the files in the working directory to match the version stored in that branch, and it tells Git to record all new commits on that branch.

    27. How can you bring a new feature in the main branch?
    • Start with the master branch
    • Create a new branch for the feature to be added
    • On the new branch add, commit and push changes. (Modify code).
    • Push feature branch to remote.
    • Create a Pull request.

    28. What is the function of ‘git rm’?
    • The git rm command can be used to remove individual files or a collection of files. The primary function of git rm is to remove tracked files from the Git index.

    29. What is the function of ‘git stash apply’?
    • Git stash apply retrieves previous uncommitted changes.

    30. What is the use of ‘git log’?
    • The Git Log tool allows you to view information about previous commits that have occurred in a project.

    31. What is ‘git add’ is used for?
    • The git add command adds a change in the working directory to the staging area. It tells Git that you want to include updates to a particular file in the next commit.

    32. What is 'git diff' is used for?
    • Diff command is used in git to track the difference between the changes made on a file.

    33. What is ‘git status’ is used for?
    • The git status command displays the state of the working directory and the staging area. It lets you see which changes have been staged, which haven't, and which files aren't being tracked by Git.

    34. Can we create multiple branch with one command?
    • Yes we can do that by using “;” with multiple commands on the same line.
Eg - git branch myAwesomeBranch1; git branch myAwesomeBranch2; git branch myAwesomeBranch3

    35. What is the command that is used to delete a branch?
    • Delete a branch with git branch -d <branch name>. The -d option will delete the branch only if it has already been pushed and merged with the remote branch.

    36. What is another option for merging in git?
    • Using an option called “git rebase”. It is slightly different way of integration than merge option.

    37. How to remove a file from git without removing it from your file system?
    • git rm --cached <filename.extension>
    • Then add file to .gitignore to stop git from adding the file back.


    38. Use of "git rebase" instead of "git merge"?
    • Instead of using a merge commit, rebasing re-writes the project history by creating brand new commits for each commit in the original branch. The major benefit of rebasing is that you get a much cleaner project history. It eliminates the unnecessary merge commits required by git merge.

    39. What is a repository in Git?
    • Git repository is just a file location where you are storing all the files related to your project. 

    40. Command used to write a commit message?
    • To write a git commit, start by typing git commit on your Terminal or Command Prompt which brings up a Vim interface for entering the commit message.

    41. What does commit object contain?
    • A commit object contains the reference to another tree object and some other information (author, committer etc.)

    42. Write one use-case of Github?

    43. Name some alternative of Git?
    • SVN, GitLab, Git Flow, Bitbucket.

    44. What is a gist in Git?
    • Gists are generally used as scratchpad / notepad, to write down small snippets of code or other information, written directly in the web interface, without the need to start a new project on your computer.

    45. What is a gist programming?

    • Gist is an easy method to share snippets or excerpts of data with others. A gist can be a string of code, a bash script or some other small piece of data.


    46. Name any two Git repository hosting services which are common?
    • Gitlab, Launchpad, AWS CodeCommit.
